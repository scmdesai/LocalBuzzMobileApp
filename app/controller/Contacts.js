/*
 * File: app/controller/Contacts.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Contact.controller.Contacts', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.MessageBox'
    ],

    config: {
        stores: [
            'MyJsonPStore',
            'MyDealsStore',
            'MyJsonPStore1',
            'UserPreferences'
        ],

        refs: {
            contactinfo: {
                autoCreate: true,
                selector: 'contactinfo',
                xtype: 'contactinfo'
            },
            contactlist: {
                autoCreate: true,
                selector: 'contactlist',
                xtype: 'contactlist'
            },
            dealsinfo: {
                autoCreate: true,
                selector: 'dealsinfo',
                xtype: 'listofdeals'
            },
            dealpicture: {
                autoCreate: true,
                selector: 'dealpicture',
                xtype: 'dealpicture'
            },
            phoneNumber: 'textfield#phoneNumber',
            address: 'textfield#address',
            mycontainer1: {
                selector: 'container#mycontainer1',
                xtype: 'favoriteview'
            },
            favoriteview: 'dataview#favoriteview'
        },

        control: {
            "dataview": {
                itemtap: 'onContactItemTap'
            },
            "button#infoBackBtn": {
                tap: 'onInfoBackBtnTapHome'
            },
            "contactpic": {
                change: 'onContactPickerChange'
            },
            "list": {
                activate: 'onListActivate'
            },
            "listofdeals": {
                itemtap: 'onListOfDealsItemTap'
            },
            "button#dealBackBtn": {
                tap: 'onDealBackBtnTap'
            },
            "textfield#phoneNumber": {
                focus: 'onPhoneNumberFocus'
            },
            "textfield#address": {
                focus: 'onAddressFocus'
            },
            "container#mycontainer1": {
                activate: 'onMycontainer1Activate'
            }
        }
    },

    onContactItemTap: function(dataview, index, target, record, e, eOpts) {
        var info = this.getContactinfo();
        info.setRecord(record);
        Ext.Viewport.setActiveItem(info);
        //console.log(info);
    },

    onInfoBackBtnTapHome: function(button, e, eOpts) {
        /*var ds = Ext.StoreManager.lookup('MyJsonPStore');
        ds.clearFilter() ;*/

        Ext.Viewport.setActiveItem(0);

        var store = Ext.getStore('UserPreferences');

                        var records= [];





                        var ds = Ext.getStore('MyJsonPStore1');
                        ds.clearFilter();
                       //store.clearFilter();



                       store.each(function(rec)
                        {



                                if(rec.get('isFavorite')===true) {

                                    records.push(rec.get('customerId'));


                                }
                            else {
                                Ext.Array.remove(records,rec.get('customerId'));
                            }



                        });


                        ds.filterBy(function(record){
                            return Ext.Array.indexOf(records, record.get('customerId')) !== -1;

                                                              }, this);

    },

    onContactPickerChange: function(picker, value, eOpts) {
        var currentForm = Ext.Viewport.getActiveItem();
        var record = currentForm.getRecord();
        if (record) {
            record.set('picture', value);
            record.commit();
            currentForm.setRecord(record);
        }

    },

    onListActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var ds = Ext.StoreManager.lookup('MyJsonPStore');
        ds.clearFilter();
    },

    onListOfDealsItemTap: function(dataview, index, target, record, e, eOpts) {
        var pic = this.getDealpicture();
        /*console.log("Data View is: ") ;
        console.log(dataview) ;
        console.log("Index is: " + index) ;
        console.log("Target is: ") ;
        console.log(target) ;
        console.log("Event is: ") ;
        console.log(e) ;
        console.log("Event Options is: ") ;
        console.log(eOpts) ;*/
        pic.setRecord(record);
        Ext.Viewport.setActiveItem(pic);




        //_gaq.push(['_trackEvent', 'Images', 'Click', 'Deal Picture', 0]);

        analytics.trackEvent(record.get('customerId'), 'DealClick', record.get('dealName'));

        var showPosition;
        if (navigator.geolocation) {
            //if you have the geolocation, run the showPosition function
            navigator.geolocation.getCurrentPosition(function showPosition(position) {
                var latitude = position.coords.latitude;
                var longitude = position.coords.longitude;

                console.log(latitude + "," + longitude);


                // api call for postal code and track event
                $.getJSON("http://api.geonames.org/findNearbyPostalCodesJSON?lat=" + latitude + "&lng=" + longitude + "&username=1234_5678", function(json) {
                   // analytics.trackEvent('set', 'dimension5', json.postalCodes[0].postalCode);

                    analytics.trackEvent(record.get('dealName'),'DealClick',json.postalCodes[0].postalCode);
                });
            });
        } else {
            //geolocation not happening
            analytics.trackEvent(record.get('dealName'), 'DealClick', 'Unknown');
        }





    },

    onDealBackBtnTap: function(button, e, eOpts) {
        var ds = Ext.StoreManager.lookup('MyJsonPStore');
        ds.clearFilter() ;
        var dealRecord = this.getContactinfo().getRecord() ;
        //console.log("Deal Record is:") ;
        //console.log(dealRecord) ;
        var customerId = dealRecord.get('customerId');
        //console.log("Customer Id is " + customerId) ;
        ds.filter('customerId', customerId);

        var customerData = ds.getData().getAt(0) ;
        //console.log("Customer Data is:") ;
        //console.log(customerData) ;

        var info = this.getContactinfo();
        info.setRecord(customerData);
        ds.clearFilter() ;
        Ext.Viewport.setActiveItem(info);

        //Ext.Viewport.setActiveItem('contactinfo') ;





    },

    onPhoneNumberFocus: function(textfield, e, eOpts) {
        console.log(e);
        numberToDial = textfield.getValue();
        textfield.blur();
        e.destroy();
        e.stopEvent();
        window.location = 'tel:'+ numberToDial ;
    },

    onAddressFocus: function(textfield, e, eOpts) {
        console.log(textfield.getValue());
        var queryString = encodeURIComponent(textfield.getValue());
        var url = 'geo:0,0?q='  + queryString;
        textfield.blur();
        e.stopEvent();
        e.destroy();
        Ext.device.Device.openURL(url);
    },

    onMycontainer1Activate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var store = Ext.getStore('UserPreferences');

                        var records= [];





                        var ds = Ext.getStore('MyJsonPStore1');
                        ds.clearFilter();
                       //store.clearFilter();



                       store.each(function(rec)
                        {



                                if(rec.get('isFavorite')===true) {

                                    records.push(rec.get('customerId'));


                                }
                            else {
                                Ext.Array.remove(records,rec.get('customerId'));
                            }



                        });


                        ds.filterBy(function(record){
                            return Ext.Array.indexOf(records, record.get('customerId')) !== -1;

                                                              }, this);


    }

});