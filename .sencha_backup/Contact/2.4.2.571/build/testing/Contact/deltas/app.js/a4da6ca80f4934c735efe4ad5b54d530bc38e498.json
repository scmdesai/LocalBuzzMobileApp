["function _e95d03a3044732e1544e34176a3a63c0321dbf9e(){};",176303,37,92,1048484,1048576,793087,"singleton\n *\n * This class is used to create JsonP requests. JsonP is a mechanism that allows for making requests for data cross\n * domain. More information is available [here](http://en.wikipedia.org/wiki/JSONP)",1203572,38,"preview\n *",305135,35,"xtype: 'button',\n *         text: 'Make JsonP Request',\n *         centered: true,\n *         handler:",1111262,35,"// Mask the viewport\n *             Ext.Viewport.mask();\n *\n *             // Remove the button\n *             button.destroy();\n *\n *             // Make the JsonP request\n *             Ext.data.JsonP.request({",1914079,33,"free.worldweatheronline.com/feed/weather.ashx',\n *                 callbackKey: 'callback',\n *        ",1172078,34,"        key: '23f6a0ab24185952101705',\n *                     q: '94301', // Palo Alto\n *                     format",1605357,33,"num_of_days: 5",945312,42,"success: function(result, request) {\n *                     // Unmask the viewport\n * ",325011,32,".unmask();\n *\n *                     // Get the weather data from the json object result\n *                     var weather = result.data.weather;\n *                     if (weather",1111278,34,"Style the viewport html, and set the html of the max temperature\n *     ",325011,32,".setStyleHtmlContent(true);\n *     ",325011,32,".setHtml('The temperature in Palo Alto is <b>' + weather[0].tempMaxF + '\ufffff\ufffff F</b>');",1461296,45,"}",2302926,50,"See the {@link #request} method for more details on making a JsonP request",1642607,44,1173157,51,1677742,306," \n */\r\nExt.define('Ext.data.JsonP",1606608,35,"util.JSONP',",1613312,95,"Number of requests done so fa",1162624,32,"requestCount: 0,\r\n    /**\n     * Hash of pending requests.",553200,32,"quests: {",674701,38,"[timeout=30000]\n     * A default timeout (in milliseconds) for any JsonP requests. If the request has not completed in this time the failure callback will\n     * be fired.\n     */\r\n    timeout: 30000",1398656,40,"sableCaching\n",1133894,52,"requests.\n     */\r\n    disableCaching",1540909,35,265803,33,1134091,89,"*/\r\n",265928,37,"/**\n     * @property {String} callbackKey\n     * Specifies the GET parameter",1498079,32," containing the function name to be executed when the\n     * request completes. Thus, a common request will be in the form of:\n     * `url?callback=Ext.data.JsonP.callback1`\n     */\r\n    callbackKey: 'callback',\r\n    /**\n     * Makes a JSONP",1155039,41,1137924,52,". Note that options will take\n     * priority over any defaults that are specified in th",554461,37,"} options.url  The URL to",1155039,33,"[options.params]  An object containing a series of key value pairs that will be sent along with the request.",1140828,40,"]  See {@link #timeout}",544782,33,"callbackKey]  See {@link #callbackKey}",544782,33,"callbackName]  See {@link #callbackKey}\n     *   The function name to use for this request. By default this name will be auto-generated: Ext.data.JsonP.callback1,\n     *   Ext.data.JsonP.callback2, etc. Setting this option to \"my_name\" will force the function name to be\n     *   Ext.data.JsonP.my_name. Use this if you want deterministic behavior, but be careful - the callbackName should be\n     *   different in each JsonP request that you make.\n     * @param {Boolean}  [options.disableCaching]  See {@link #disableCaching}\n     * @param {String}   [options.disableCachingParam]  See {@link #disableCachingParam}",1523215,35,"success]  A function to execute if the request succeeds.",1523215,44," A function to execute if the request fails.",1523215,35,"callback]  A function to execute when the request completes, whether it is a success or failure.\n     * @param {Object}   [options.scope] ",1602062,43,"s: The \"this\" object for the\n     *   callback function. D",117423,37,"\n     * @return {Object}  request An object containing the request details",1143951,63,1829239,33,"if (!options.",1155936,38,"A url must be specified for a JSONP request.'",1786064,51,"disableCaching = Ext.isDefined(options.disableCaching) ? options.disableCaching : me.disableCaching,\r\n            cacheParam = ",1158178,34,"disableCachingParam,\r\n            id = ++me.requestCount,\r\n            callbackName = options.callbackName || 'callback' + id,\r\n            callbackKey = options.callbackKey || me.callbackKey,\r\n            timeout = Ext.isDefined(options.timeout) ? options.timeout : me.timeout",1579358,33,"({}, options.params)",1155417,32,",\r\n            name = Ext.isSandboxed ? Ext.getUniqueGlobalNamespace() : 'Ext',\r\n            request, script;\r\n        params[callbackKey] = name + '.data.JsonP.' + callbackName;\r\n        if (disableCaching) {\r\n            params[cacheParam]",121931,34,"}\r\n        script = me.createScript(url, params, options);\r\n        me.requests[id] = request = {\r\n",2189295,35,"params: params,\r\n            script: script,\r\n",1478620,33,2036784,35,2036687,39,"failure: options.failure,\r\n            callback: options.callback,\r\n            callbackKey: callbackKey,\r\n            callbackName: callbackName\r\n        };\r\n        if (timeout > 0) {\r\n            request.timeout = setTimeout(Ext.bind(me.handleTimeout, me, [\r\n",1146443,37,"]), timeout);\r\n        }\r\n        me.setupErrorHandling(request);\r\n        me[callbackName] = Ext.bind(me.handleResponse, me, [\r\n            request\r\n        ], true);\r\n        me.loadScrip",1579983,61,"Abort a request. If the request parameter is not specified all open requests will be aborted.\n     * @param {Object/String} request The request to abor",1164055,56,"requests = this.requests",480303,33,"request) {\r\n            if (!request.id) {\r\n                request = requests[reques",170304,37,"handleAbort(reques",1492192,35,"for (key",1164794,61,"key",805171,32,"bort(requests[key",18223,47,"}\r\n    },\r\n    /**\n     * Sets up error handling for the script",1582976,33,"Object} request The request.\n     */\r\n    setupErrorHandling",1165791,39,"script.onerror = Ext.bind(this.handleError, this, [\r\n            request",1618783,38,"Handles any aborts when loading the script",1582976,33,"Object} request The request.\n     */\r\n    handleAbort",1165791,39,"errorType = 'abort';\r\n        this.handleResponse(null, request);\r\n    },\r\n    /**\n     * Handles any script errors when loading the script",1582976,33,"Object} request The request.\n     */\r\n    handleError",1165791,39,"errorType = 'error';\r\n        this.handleResponse(null, request)",1165639,40,"script handling error",1582975,34,"Object} request",1165757,34,"ErrorHandling",1165791,39,"script.onerror = null;\r\n    },\r\n    /**\n     * Handle any script timeout",1582975,34,"Object} request The request.\n     */\r\n    handleTimeout",1165791,39,"errorType = 'timeout';\r\n        this.handleResponse(null, request);\r\n    },\r\n    /**\n     * Handle a successful",1476685,32,2159855,35,"from the request",1165148,57,"handleResponse: function(result, request) {\r\n        var success = true;\r\n        if (request.timeout) {\r\n    ",1165569,48,"}\r\n        delete this[request.callbackName];\r\n        delete this",1167741,32,"this.cleanupErrorHandling(request);\r\n        Ext.fly(request.script).destroy();\r\n        if (request.errorType) {\r\n",1476029,42,"Ext.callback(request.failure, request.scope, [\r\n                request.errorType,\r\n",1146443,37,1511695,35,"Ext.callback(request.success, request.scope, [\r\n                result,\r\n",1146443,37,1167376,37,"request.callback, request.scope, [",1167469,39,"ult,\r\n            request.errorType,\r\n            request",1618783,38,"Create the script tag given the specified url, params and options. The options\n     * parameter is passed to allow an override to access it",1582976,33,"String} url The url of the request\n     * @param {Object} params Any extra params to be sent",1154752,36,"object passed to {@link #request}.\n     */\r\n    createScript: function(",1149796,33,279413,45,";\r\n        script.setAttribute(\"src\", Ext.urlAppend(url,",1157342,33,"));\r\n        script.setAttribute(\"async\", true);\r\n        script.setAttribute(\"type\", \"text/javascript\");\r\n        return script",1829487,36,"script for the given request by appending it to the HEAD element. This is\n     * its own method so that users can override it (as well as {@link #createScript})",1582976,33,"Objec",1601472,37,"/\r\n    loadScrip",1164075,32,"Ext.getHead().appendChild(request.script)",1865920,45,1841683,5874,"The JsonP proxy is useful when you need to load data from a domain other than the one your application is running on. If\n * your application is running on http://domainA.com it cannot use",1573117,32,"} to load its data\n *",1591165,33,"cross-domain ajax requests are prohibited by the browser.\n *\n * We can get around this using a JsonP proxy. JsonP proxy injects a `<script>` tag into the DOM whenever an AJAX request\n * would usually be made. Let's say we want to",1591155,34,"/users - the script tag that would be\n * injected might look like this:\n *\n *     <script src=\"http://domainB.com/users?callback=someCallback\"></script>\n *\n * When we inject the tag above, the browser makes a request to that url and includes the response as if it was any\n * other type of JavaScript include. By passing a callback in the url above, we're telling domainB's server that we want\n * to be notified when the result comes in and that it should call our callback function with the data it sends back. So\n * long as the server formats the response to look like this, everything will work:\n *\n *     someCallback(",1529111,90,1485496,33,"email",1484665,32,1305759,35," soon as the script finishes loading, the 'someCallback' function that we passed in the url is called with the JSON\n * object that the server returned.\n *\n * JsonP proxy takes care of all of this automatically. It formats the url you pass, adding the callback parameter\n * automatically. It even creates a temporary callback function, waits for it to be called and then puts the data into\n * the Proxy making it look just like you loaded it through a normal",1573117,38,". Here's how\n * we might set that up",1563968,116,1482956,167,"jsonp',\n *             url : 'http://domainB.com/users'",1455824,35,"store.load();\n *\n * That's all we need to do - JsonP proxy takes care of the rest. In this case the Proxy will have injected a script tag\n * like this:\n *\n *     <script src=\"http://domainB.com/users?callback=callback1\"></script>\n *\n * # Customization\n *\n * This script tag can be customized using the {@link #callbackKey} configuration. For example:\n *",944800,62,1589531,57,"jsonp',\n *             url : 'http://domainB.com/users',\n *             callbackKey: 'theCallbackFunction'",1455824,35,"store.load();\n *\n * Would inject a script tag like this:\n *\n *     <script src=\"http://domainB.com/users?theCallbackFunction=callback1\"></script>\n *\n * # Implementing on the server side\n *\n * The remote server side needs to be configured to return data in this format. Here are suggestions for how you might\n * achieve this using Java, PHP and ASP.net:\n *\n * Java:\n *\n *     boolean jsonP = false;\n *     String cb = request.getParameter(\"callback\");\n *     if (cb != null) {\n *         jsonP = true;\n *         response.setContentType(\"text/javascript\");\n *     } else {\n *         response.setContentType(\"application/x-json\");\n *     }\n *     Writer out = response.getWriter();\n *     if (jsonP) {\n *         out.write(cb + \"(\");\n *     }\n *     out.print(dataBlock.toJsonString());\n *     if (jsonP) {\n *         out.write(\");\");\n *     }\n *\n * PHP:\n *\n *     $callback = $_REQUEST['callback'];\n *\n *     // Create the output object.\n *     $output = array('a' => 'Apple', 'b' => 'Banana');\n *\n *     //start output\n *     if ($callback) {\n *         header('Content-Type: text/javascript');\n *         echo $callback . '(' . json_encode($output) . ');';\n *     } else {\n *         header('Content-Type: application/x-json');\n *         echo json_encode($output);\n *     }\n *\n * ASP.net:\n *\n *     String jsonString = \"{success: true}\";\n *     String cb = Request.Params.Get(\"callback\");\n *     String responseString = \"\";\n *     if (!String.IsNullOrEmpty(cb)) {\n *         responseString = cb + \"(\" + jsonString + \")\";\n *     } else {\n *         responseString = jsonString;\n *     }\n *     Response.Write(responseString",1606448,45,1677760,312,"proxy.JsonP",1865695,33,"Server",868256,32,"data.ScriptTagProxy',\r\n    alias: [\r\n        'proxy.jsonp',\r\n        'proxy.scripttag",863728,34,"defaultWriterType: 'bas",1114447,42,"callbackKey\n         * See {@link Ext.data.JsonP#callbackKey}",1222016,45,"allbackKey: 'callbac",1204479,42,"recordParam\n         * The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString'",1223600,45,"recordParam: 'records",1246896,42,"autoAppendParams",1630432,36,"append the request's params to the generated url",849936,45,"utoAppendParams: true",1520751,34,"the read request to the remote domain. JsonP proxy does not actually create an Ajax request,\n     * instead we write out a `<script>` tag based on the configuration of the internal Ext.data.Request",1753997,32,1757001,70,"o execute.",1533375,35,"A callback function to execute when",1448593,33,1707184,44,"execute the callback in",1568206,32," @protected",1600335,77,"action = operation.getAction();\r\n        if (action !== 'read'",1609694,35,"JsonP proxies can only be used to read data.');\r\n        }\r\n        //generate the unique IDs for this request",1324864,40,1600476,34,1504668,43,";\r\n        // apply JsonP proxy-specific attributes to the Request",1600511,43,"callbackKey: me.getCallbackKey",1600576,56,"scope: me",1600661,86,"\r\n        });\r\n        // Prevent doubling up because the params are already added to the url in buildUrl\r\n        if (me.getAutoAppendParams()) {",1505237,32,"{});\r\n        }\r\n        request.setJsonP(Ext.data.JsonP",1601229,36,");\r\n        // Set the params back once we have made the request though\r\n        request.setParams(params)",1852685,44,"me.lastRequest = request;",1506045,32,1377504,35,"reates and returns the function that is",1165900,32,"pleted. The returned function\n     * should accept a Response object, which contains the response to be read by the configured Reader.\n     * The third argument is the callback that should be called after the request has been completed and the Reader has decoded\n     * the response. This callback will typically be the callback passed by a store, e.g. in proxy.read(operation, theCallback, scope)\n     * theCallback refers to the callback argument received by this function.\n     * See {@link #doRequest} for details",1601440,47,1601787,187," This is usually the callback\n     * passed to doRequest",1602032,266,"success, response, errorType) {\r\n            delete me.lastRequest;",1602327,108,",\r\n    // @inheritdoc",1582629,61,"operation.setException(operation.getRequest().getJsonP().errorType",305977,37,1586535,48,"Adds the params and callback function name to the url",1588653,46,1601487,44,"url.",1586839,90,"callParent(arguments)",1579358,33,"({}, request.getParams()),\r\n            filters = params.filters,\r\n            filter, i, value;\r\n        delete params.filters;\r\n        if (me.getAutoAppendParams",1587103,48,"Object.toQueryString(params));\r\n        }\r\n",1851493,54,"for (i = 0; i < filter",2005248,34,2233680,34,"    value = filter.getValue();\r\n",104072,50,"url = Ext.urlAppend(url, filter.getProperty() + \"=\" +",858366,59,37311,40,"@inheritdoc",1722876,45,"this.abort(",1002240,46,",\r\n    /**\n     * Aborts the current server request if one is currently running.\n     */\r\n    abort: function() {\r\n        var lastRequest = this.lastRequest;\r\n        if (lastRequest) {\r\n            Ext.data.JsonP.abort(lastRequest.getJsonP()",724240,37,1847533,228255,2073967,53,2074872,44,2075984,35,73424,36,398208,43,2075999,232452,"store/MyJsonPStore",2308460,510,"store.MyJsonP",1832202,44,"config: {",2308068,61,"MyJsonP",2308136,46,"jsonp',\r\n            url: 'http://awseb-e-t-awsebloa-6wjsk6atywko-728481327.us-west-2.elb.amazonaws.com/stores',\r\n            reader: {\r\n",1611359,42,"}",2316909,43,2308451,699,"MyJsonP",2309157,945,"MyJsonP",2310109,7477,"MyJsonP",2317593,1304,"MyJsonP",2318904,180,"MyJsonP",2319091,1036,",\r\n        'MyJsonP",2320121,543,"/*",2320655,54,"\n        if (!ds.getCount()) {",2320741,68,"\n            ds.add({",2320832,36,2320869,36,2307275,32,"aaron@sencha.com',",2320957,44,"\n            });\n            ds.add({",2321041,37,2321079,36,2321116,44,"\n            });\n            ds.add({",2321200,35,2321236,37,2321116,44,"\n            });\n            ds.add({",2321358,36,2321395,36,2307949,33,",",2321467,44,"\n            });\n            ds.add({",2321551,35,2321587,44,2307949,33,",",2321116,44,"\n            });\n        }*/\r\n        var view =",2321748,34,"});\r\n        Ext.create('Contact.store.MyJsonPStore', {\r\n    ",2305805,33,981002,34,"load: function(self, records) {\r\n                    view.setData(record",786544,48,");",2321739,198]